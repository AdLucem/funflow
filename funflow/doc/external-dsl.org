#+TITLE: External DSL for Funflow

* Introduction

  Funflow currently has support for composing workflows using an internal
  arrow-based DSL. This works fine for many use-cases, but has a number of
  disadvantages:

  - Since the DSL is internal to Haskell, all workflows must be written and
    compiled to be run. This is fine when you're embedding funflow into another
    application, but annoying when you want to toy with a workflow and submit it
    to an existing cluster.
  - Workflows written directly in Haskell cannot be serialised and sent over the
    network, which means we cannot distribute flows, only external tasks.
  - Because we want to consider the definition of a task as part of its output
    hash, we are unable to transparently cache Haskell tasks, even where they are
    pure.
  - Funflow is accessible only to those familiar with coding in Haskell.
  - The Arrow syntax in Haskell has a number of performance problems; in
    particular, the following expression will compile to a sequential application,
    rather than a parallel one as might be expected.

    #+BEGIN_SRC haskell
      proc x -> do
        a <- f -< x
        b <- f -< x
        returnA -< (a,b)
    #+END_SRC

  - We would like to support a graphical composition tool for workflows. This
    should support the ability to load and save workflows, which would be hard
    to support in our current format.

  As a result, we would like to define an external DSL to compile into funflow
  flows. This would enable the above and open up the potential to use funflow in
  a much wider variety of cases.

* Requirements

  We can translate the above into requirements for the creation of an exteral
  DSL which should:

  - Support creation of external tasks, namely:
    - Specifying container options.
    - Providing environment configuration.
  - Support some level of internal task creation, through compilation to Haskell
    functions.
  - Support chaining of steps in all the various possibilities open to funflow.
  - Handle error cases.
  - Compile to performant Haskell expressions; in particular, no sequential
    orderering should be forced except as required by dependencies.
  - Support the necessary tools for working with the content store, such as
    staging input files and combining outputs.

** Common Workflow Language

   In recent years there has been effort to standardise the language used to
   define pipelines in order to allow workflows to be run by multiple tools.
   This has resulted in [[https://www.commonwl.org/user_guide/][Common Workflow Language]], a format for specifying
   workflows already supported by various tools.

   Using CWL would bring us a number of benefits. In particular, there already
   exist graphical composition tools for CWL workflows, which could
   transparently be adapted to create funflow workflows. It would also mean we
   could use existing CWL-defined workflows as constituents in funflow.

   As such, we should first evaluate whether it would be possible to use CWL as
   our DSL. This would require:

   - Making sure that we can adapt CWL to work with the content store in a
     sensible way. CWL seems to be currently specified to allow the user to
     control where exactly their inputs/outputs come from, which we don't want
     to support.
   - Making sure we can extend CWL to support generating some subset of internal
     tasks - e.g. tasks run directly within Haskell. In particular it would be
     nice to generate pure functions in this way.
