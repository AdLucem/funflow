-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Make composable workflows
--   
--   See README at <a>https://github.com/tweag/funflow2</a>
@package funflow
@version 2.0.0

module Funflow.Effects.Command
data CommandEffectConfig
CommandEffectConfig :: Text -> [Text] -> [(Text, Text)] -> CommandEffectConfig
[command] :: CommandEffectConfig -> Text
[args] :: CommandEffectConfig -> [Text]
[env] :: CommandEffectConfig -> [(Text, Text)]
data CommandEffect i o
[CommandEffect] :: CommandEffectConfig -> CommandEffect () ()
[ShellCommandEffect] :: Text -> CommandEffect () ()

module Funflow.Effects.Docker
data DockerEffectConfig
DockerEffectConfig :: Text -> Text -> [Text] -> DockerEffectConfig
[image] :: DockerEffectConfig -> Text
[command] :: DockerEffectConfig -> Text
[args] :: DockerEffectConfig -> [Text]
data DockerEffect i o
[DockerEffect] :: DockerEffectConfig -> DockerEffect () ()

module Funflow.Effects.Nix
data NixEffectConfig
NixEffectConfig :: Environment -> NixpkgsSource -> Text -> [Text] -> [(Text, Text)] -> NixEffectConfig

-- | Specification of the nix environment
[nixEnv] :: NixEffectConfig -> Environment

-- | Which version of nixpkgs to use
[nixpkgsSource] :: NixEffectConfig -> NixpkgsSource

-- | The command to run in the environment
[command] :: NixEffectConfig -> Text

-- | Arguments to pass to the command
[args] :: NixEffectConfig -> [Text]

-- | Environmental variables which are set in the environment
[env] :: NixEffectConfig -> [(Text, Text)]
data NixEffect i o
[NixEffect] :: NixEffectConfig -> NixEffect () ()
data NixpkgsSource

-- | Inherit the <tt>NIX_PATH</tt> from the environment
NIX_PATH :: NixpkgsSource

-- | The <a>URI</a> pointing to a nixpkgs tarball
NixpkgsTarball :: URI -> NixpkgsSource
data Environment

-- | Path to a shell.nix file
ShellFile :: Text -> Environment

-- | A list of packages that will be passed by <tt>-p</tt>.
PackageList :: [Text] -> Environment
instance GHC.Generics.Generic Funflow.Effects.Nix.Environment
instance GHC.Generics.Generic Funflow.Effects.Nix.NixpkgsSource
instance Data.CAS.ContentHashable.ContentHashable GHC.Types.IO Funflow.Effects.Nix.Environment
instance Data.CAS.ContentHashable.ContentHashable GHC.Types.IO Funflow.Effects.Nix.NixpkgsSource

module Funflow.Effects.Simple
data SimpleEffect i o
[PureEffect] :: (i -> o) -> SimpleEffect i o
[IOEffect] :: (i -> IO o) -> SimpleEffect i o

module Funflow.Flow
type Flow input output = forall m. (MonadIO m) => AnyRopeWith RequiredStrands (RequiredCoreEffects m) input output
toFlow :: IsFlow binEff => binEff i o -> Flow i o
pureFlow :: (i -> o) -> Flow i o
ioFlow :: (i -> IO o) -> Flow i o
commandFlow :: CommandEffectConfig -> Flow () ()
shellFlow :: Text -> Flow () ()
dockerFlow :: DockerEffectConfig -> Flow () ()
nixFlow :: NixEffectConfig -> Flow () ()
instance Funflow.Flow.IsFlow Funflow.Effects.Simple.SimpleEffect
instance Funflow.Flow.IsFlow Funflow.Effects.Command.CommandEffect
instance Funflow.Flow.IsFlow Funflow.Effects.Docker.DockerEffect
instance Funflow.Flow.IsFlow Funflow.Effects.Nix.NixEffect

module Funflow.Run
data FlowExecutionConfig
FlowExecutionConfig :: CommandExecutionHandler -> FlowExecutionConfig
[commandExecution] :: FlowExecutionConfig -> CommandExecutionHandler
data CommandExecutionHandler
SystemExecutor :: CommandExecutionHandler
ExternalExecutor :: CommandExecutionHandler
defaultExecutionConfig :: FlowExecutionConfig
runFlow :: FlowExecutionConfig -> Flow input output -> input -> IO output

module Funflow
type Flow input output = forall m. (MonadIO m) => AnyRopeWith RequiredStrands (RequiredCoreEffects m) input output
(>>>) :: forall k cat (a :: k) (b :: k) (c :: k). Category cat => cat a b -> cat b c -> cat a c
toFlow :: IsFlow binEff => binEff i o -> Flow i o
data SimpleEffect i o
[PureEffect] :: (i -> o) -> SimpleEffect i o
[IOEffect] :: (i -> IO o) -> SimpleEffect i o
data CommandEffect i o
[CommandEffect] :: CommandEffectConfig -> CommandEffect () ()
[ShellCommandEffect] :: Text -> CommandEffect () ()
data DockerEffect i o
[DockerEffect] :: DockerEffectConfig -> DockerEffect () ()
data NixEffect i o
[NixEffect] :: NixEffectConfig -> NixEffect () ()
data FlowExecutionConfig
FlowExecutionConfig :: CommandExecutionHandler -> FlowExecutionConfig
[commandExecution] :: FlowExecutionConfig -> CommandExecutionHandler
data CommandExecutionHandler
SystemExecutor :: CommandExecutionHandler
ExternalExecutor :: CommandExecutionHandler
defaultExecutionConfig :: FlowExecutionConfig
runFlow :: FlowExecutionConfig -> Flow input output -> input -> IO output

-- | Any rope whose core provides caching can run cached tasks. The task is
--   identified by an explicit identifier
caching :: forall (core :: Type -> Type -> Type) ident a b (r :: RopeRec) (mantle :: [Strand]). (Arrow core, ProvidesCaching core, ContentHashable IO ident, ContentHashable IO a, Store b) => ident -> Rope r mantle core a b -> Rope r mantle core a b
pureFlow :: (i -> o) -> Flow i o
ioFlow :: (i -> IO o) -> Flow i o
commandFlow :: CommandEffectConfig -> Flow () ()
shellFlow :: Text -> Flow () ()
dockerFlow :: DockerEffectConfig -> Flow () ()
nixFlow :: NixEffectConfig -> Flow () ()

module Funflow.Util
mapPair :: (a -> b) -> (a, a) -> (b, b)
