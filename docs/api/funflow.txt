-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Make composable workflows
--   
--   See README at <a>https://github.com/tweag/funflow2</a>
@package funflow
@version 2.0.0


-- | Run commands using Docker
module Funflow.Effects.Docker

-- | Configure what task to run in Docker
data DockerEffectConfig
DockerEffectConfig :: Text -> Text -> [Arg] -> DockerEffectConfig

-- | The name of the docker image
[image] :: DockerEffectConfig -> Text

-- | The command to run
[command] :: DockerEffectConfig -> Text

-- | The arguments to pass to the command run inside of the container
[args] :: DockerEffectConfig -> [Arg]
data DockerEffect i o
[DockerEffect] :: DockerEffectConfig -> DockerEffect DockerEffectInput Item

-- | Input to a Docker effect to finalize its configuration
data DockerEffectInput
DockerEffectInput :: [VolumeBinding] -> Map String Text -> DockerEffectInput

-- | Input items to mount on the container
[inputBindings] :: DockerEffectInput -> [VolumeBinding]

-- | A map representing how to fill the argument placeholders (placeholder
--   label -&gt; argument value)
[argsVals] :: DockerEffectInput -> Map String Text

-- | Represent how to bind a directory from cas-store (<tt>CS.Item</tt>) to
--   a container internal file system
data VolumeBinding
VolumeBinding :: Item -> Path Abs Dir -> VolumeBinding
[item] :: VolumeBinding -> Item
[mount] :: VolumeBinding -> Path Abs Dir

-- | Represent an argument to pass to the command run inside of a Docker
--   container
data Arg

-- | Raw text argument
Arg :: Text -> Arg

-- | A placeholder for an argument to be passed as runtime input to the
--   effect (filled by <tt>argsVals</tt>)
Placeholder :: String -> Arg
instance Data.String.IsString Funflow.Effects.Docker.Arg


-- | Run a pure function or an IO monadic continuation
module Funflow.Effects.Simple
data SimpleEffect i o
[PureEffect] :: (i -> o) -> SimpleEffect i o
[IOEffect] :: (i -> IO o) -> SimpleEffect i o

module Funflow.Flow

-- | Flow is the main type of Funflow. It is a task that takes an input
--   value of type <tt>input</tt> and produces an output value of type
--   <tt>output</tt>. It can use any named effect (strand) that is defined
--   in <tt>RequiredStrands</tt>.
type Flow input output = forall m. (MonadIO m) => AnyRopeWith RequiredStrands (RequiredCoreEffects m) input output

-- | The constraints on the set of "strands" These will be "interpreted"
--   into "core effects" (which have contraints defined below).
type RequiredStrands = '[ '("simple", SimpleEffect), '("docker", DockerEffect)]

-- | The class constraints on the "core effect". The "core effect" is the
--   effect used to run any kind of "binary effect" ("strand")
type RequiredCoreEffects m = '[Arrow, ArrowChoice, HasKleisli m, ProvidesCaching]
toFlow :: IsFlow binEff => binEff i o -> Flow i o
pureFlow :: (i -> o) -> Flow i o
ioFlow :: (i -> IO o) -> Flow i o
dockerFlow :: DockerEffectConfig -> Flow DockerEffectInput Item
instance Funflow.Flow.IsFlow Funflow.Effects.Simple.SimpleEffect
instance Funflow.Flow.IsFlow Funflow.Effects.Docker.DockerEffect


-- | This module defines how to run your flows
module Funflow.Run

-- | Run a flow
runFlow :: Flow input output -> input -> IO output

module Funflow
(>>>) :: forall k cat (a :: k) (b :: k) (c :: k). Category cat => cat a b -> cat b c -> cat a c

-- | Any rope whose core provides caching can run cached tasks. The task is
--   identified by an explicit identifier
caching :: forall (core :: Type -> Type -> Type) ident a b (r :: RopeRec) (mantle :: [Strand]). (Arrow core, ProvidesCaching core, ContentHashable IO ident, ContentHashable IO a, Store b) => ident -> Rope r mantle core a b -> Rope r mantle core a b

-- | Run a flow
runFlow :: Flow input output -> input -> IO output
