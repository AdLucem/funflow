-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Make composable workflows
--   
--   See README at <a>https://github.com/tweag/funflow2</a>
@package funflow2
@version 0.1.0

module Funflow.Flows.Command
data CommandFlowConfig
CommandFlowConfig :: Text -> [Text] -> [(Text, Text)] -> CommandFlowConfig
[command] :: CommandFlowConfig -> Text
[args] :: CommandFlowConfig -> [Text]
[env] :: CommandFlowConfig -> [(Text, Text)]
data CommandFlow i o
[CommandFlow] :: CommandFlowConfig -> CommandFlow () ()
[ShellCommandFlow] :: Text -> CommandFlow () ()

module Funflow.Flows.Docker
data DockerFlowConfig
DockerFlowConfig :: Text -> Text -> [Text] -> DockerFlowConfig
[image] :: DockerFlowConfig -> Text
[command] :: DockerFlowConfig -> Text
[args] :: DockerFlowConfig -> [Text]
data DockerFlow i o
[DockerFlow] :: DockerFlowConfig -> DockerFlow () ()

module Funflow.Flows.Nix
data NixpkgsSource

-- | Inherit the <tt>NIX_PATH</tt> from the environment
NIX_PATH :: NixpkgsSource

-- | The <a>URI</a> pointing to a nixpkgs tarball
NixpkgsTarball :: URI -> NixpkgsSource
data NixFlowConfig
NixFlowConfig :: Environment -> NixpkgsSource -> Text -> [Text] -> [(Text, Text)] -> NixFlowConfig

-- | Specification of the nix environment
[nixEnv] :: NixFlowConfig -> Environment

-- | Which version of nixpkgs to use
[nixpkgsSource] :: NixFlowConfig -> NixpkgsSource

-- | The command to run in the environment
[command] :: NixFlowConfig -> Text

-- | Arguments to pass to the command
[args] :: NixFlowConfig -> [Text]

-- | Environmental variables which are set in the environment
[env] :: NixFlowConfig -> [(Text, Text)]
data Environment

-- | Path to a shell.nix file
ShellFile :: Text -> Environment

-- | A list of packages that will be passed by <tt>-p</tt>.
PackageList :: [Text] -> Environment
data NixFlow i o
[NixFlow] :: NixFlowConfig -> NixFlow () ()
instance GHC.Generics.Generic Funflow.Flows.Nix.Environment
instance GHC.Generics.Generic Funflow.Flows.Nix.NixpkgsSource
instance Data.CAS.ContentHashable.ContentHashable GHC.Types.IO Funflow.Flows.Nix.Environment
instance Data.CAS.ContentHashable.ContentHashable GHC.Types.IO Funflow.Flows.Nix.NixpkgsSource

module Funflow.Flows.Simple
data SimpleFlow i o
[Pure] :: (i -> o) -> SimpleFlow i o
[IO] :: (i -> IO o) -> SimpleFlow i o

module Funflow.Flow
type Flow input output = forall m. (MonadIO m) => AnyRopeWith RequiredStrands (RequiredCoreEffects m) input output

module Funflow.Flows
pureFlow :: (i -> o) -> Flow i o
ioFlow :: (i -> IO o) -> Flow i o
shellFlow :: Text -> Flow () ()
commandFlow :: CommandFlowConfig -> Flow () ()
dockerFlow :: DockerFlowConfig -> Flow () ()
nixFlow :: NixFlowConfig -> Flow () ()

module Funflow.Util
mapPair :: (a -> b) -> (a, a) -> (b, b)

module Funflow.Run
data FlowExecutionConfig
FlowExecutionConfig :: CommandExecutionHandler -> FlowExecutionConfig
[commandExecution] :: FlowExecutionConfig -> CommandExecutionHandler
data CommandExecutionHandler
SystemExecutor :: CommandExecutionHandler
ExternalExecutor :: CommandExecutionHandler
defaultExecutionConfig :: FlowExecutionConfig
runFlow :: FlowExecutionConfig -> Flow input output -> input -> IO output

module Funflow
type Flow input output = forall m. (MonadIO m) => AnyRopeWith RequiredStrands (RequiredCoreEffects m) input output
(>>>) :: forall k cat (a :: k) (b :: k) (c :: k). Category cat => cat a b -> cat b c -> cat a c
data FlowExecutionConfig
FlowExecutionConfig :: CommandExecutionHandler -> FlowExecutionConfig
[commandExecution] :: FlowExecutionConfig -> CommandExecutionHandler
data CommandExecutionHandler
SystemExecutor :: CommandExecutionHandler
ExternalExecutor :: CommandExecutionHandler
defaultExecutionConfig :: FlowExecutionConfig
runFlow :: FlowExecutionConfig -> Flow input output -> input -> IO output
pureFlow :: (i -> o) -> Flow i o
ioFlow :: (i -> IO o) -> Flow i o
shellFlow :: Text -> Flow () ()
commandFlow :: CommandFlowConfig -> Flow () ()
dockerFlow :: DockerFlowConfig -> Flow () ()
nixFlow :: NixFlowConfig -> Flow () ()

-- | Any rope whose core provides caching can run cached tasks. The task is
--   identified by an explicit identifier
caching :: forall (core :: Type -> Type -> Type) ident a b (r :: RopeRec) (mantle :: [Strand]). (Arrow core, ProvidesCaching core, ContentHashable IO ident, ContentHashable IO a, Store b) => ident -> Rope r mantle core a b -> Rope r mantle core a b
