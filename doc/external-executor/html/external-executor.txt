-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Run external tasks and coordinate them
--   
--   See README at
--   <a>https://github.com/tweag/funflow/external-executor</a>
@package external-executor
@version 0.1.0


-- | Definition of external tasks
module Control.External

-- | Set of items which may be treated as an input path to an external
--   task.
data InputPath

-- | An item in the content store.
IPItem :: Item -> InputPath

-- | An external file whose contents are considered assured by the external
--   system.
IPExternalFile :: ExternallyAssuredFile -> InputPath

-- | An external directory whose contents are considered assured by the
--   external system.
IPExternalDir :: ExternallyAssuredDirectory -> InputPath

-- | Component of a parameter
data ParamField

-- | Text component.
ParamText :: !Text -> ParamField

-- | Reference to a path to a content store item.
ParamPath :: !InputPath -> ParamField

-- | Reference to an environment variable.
ParamEnv :: !Text -> ParamField

-- | Reference to the effective user ID of the executor.
ParamUid :: ParamField

-- | Reference to the effective group ID of the executor.
ParamGid :: ParamField

-- | Reference to the output path in the content store.
ParamOut :: ParamField

-- | A quoted command that we can pass to another program as an argument.
ParamCmd :: Param -> ParamField

-- | A parameter to an external task
--   
--   The runtime values to external references, e.g. environment variables,
--   should not significantly influence the result of the external task. In
--   particular, the content hash will not depend on these runtime values.
newtype Param
Param :: [ParamField] -> Param

-- | Converter of path components.
data ConvParam f
ConvParam :: (Item -> f (Path Abs Dir)) -> (Text -> f Text) -> f CUid -> f CGid -> f (Path Abs Dir) -> ConvParam f

-- | Resolve a reference to a content store item.
[convPath] :: ConvParam f -> Item -> f (Path Abs Dir)

-- | Resolve an environment variable.
[convEnv] :: ConvParam f -> Text -> f Text

-- | Resolve the effective user ID.
[convUid] :: ConvParam f -> f CUid

-- | Resolve the effective group ID.
[convGid] :: ConvParam f -> f CGid

-- | Resolve the output path in the content store.
[convOut] :: ConvParam f -> f (Path Abs Dir)
paramFieldToText :: Applicative f => ConvParam f -> ParamField -> f Text

-- | Transform a parameter to text using the given converter.
paramToText :: Applicative f => ConvParam f -> Param -> f Text
stringParam :: String -> Param
textParam :: Text -> Param

-- | Reference to a path to either: - a content store item, or - an
--   externally assured file/directory.
pathParam :: InputPath -> Param

-- | Reference to a path to a file or directory within a store item.
contentParam :: Content t -> Param

-- | Reference an externally assured file
externalFileParam :: ExternallyAssuredFile -> Param

-- | Reference an externally assured file
externalDirectoryParam :: ExternallyAssuredDirectory -> Param

-- | Reference to an environment variable.
envParam :: Text -> Param

-- | Reference to the effective user ID of the executor.
uidParam :: Param

-- | Reference to the effective group ID of the executor.
gidParam :: Param

-- | Reference to the output path in the content store.
outParam :: Param

-- | Control how and where stdout from the process is captured. Some
--   external steps will write their output to stdout rather than to a
--   file.
data OutputCapture

-- | Specify that the step will write its output files directly, and that
--   stdout will not be captured in the step output.
NoOutputCapture :: OutputCapture

-- | Capture output to a file named <tt>out</tt> in the output directory.
StdOutCapture :: OutputCapture

-- | Capture output to a custom named file in the output directory.
CustomOutCapture :: Path Rel File -> OutputCapture

-- | Get the file to write output to, if this is desired.
outputCaptureToRelFile :: OutputCapture -> Maybe (Path Rel File)

-- | Control the environment set for the external process. This can either
--   inherit from the surrounding environment, or explicitly set things.
data Env

-- | Inherit all environment variables from the surrounding shell. Note
--   that the values of these variables will not be taken into account in
--   the content hash, and so changes to them will not trigger a rerun of
--   the step.
EnvInherit :: Env
EnvExplicit :: [(Text, Param)] -> Env

-- | A monomorphic description of an external task. This is basically just
--   a command which can be run.
data ExternalTask
ExternalTask :: Text -> [Param] -> Env -> OutputCapture -> ExternalTask
[_etCommand] :: ExternalTask -> Text

-- | Environment variables to set for the scope of the execution.
[_etParams] :: ExternalTask -> [Param]
[_etEnv] :: ExternalTask -> Env
[_etWriteToStdOut] :: ExternalTask -> OutputCapture
etCommand :: Lens' ExternalTask Text
etParams :: Lens' ExternalTask [Param]
etEnv :: Lens' ExternalTask Env
etWriteToStdOut :: Lens' ExternalTask OutputCapture
data TaskDescription
TaskDescription :: ContentHash -> ExternalTask -> TaskDescription
[_tdOutput] :: TaskDescription -> ContentHash
[_tdTask] :: TaskDescription -> ExternalTask
tdOutput :: Lens' TaskDescription ContentHash
tdTask :: Lens' TaskDescription ExternalTask
instance GHC.Show.Show Control.External.TaskDescription
instance GHC.Generics.Generic Control.External.TaskDescription
instance GHC.Show.Show Control.External.ExternalTask
instance GHC.Generics.Generic Control.External.ExternalTask
instance GHC.Show.Show Control.External.Env
instance GHC.Generics.Generic Control.External.Env
instance GHC.Show.Show Control.External.OutputCapture
instance GHC.Generics.Generic Control.External.OutputCapture
instance GHC.Show.Show Control.External.ParamField
instance GHC.Generics.Generic Control.External.ParamField
instance GHC.Show.Show Control.External.Param
instance GHC.Base.Semigroup Control.External.Param
instance GHC.Base.Monoid Control.External.Param
instance GHC.Generics.Generic Control.External.Param
instance GHC.Show.Show Control.External.InputPath
instance GHC.Generics.Generic Control.External.InputPath
instance Data.CAS.ContentHashable.ContentHashable GHC.Types.IO Control.External.ExternalTask
instance Data.Aeson.Types.FromJSON.FromJSON Control.External.ExternalTask
instance Data.Aeson.Types.ToJSON.ToJSON Control.External.ExternalTask
instance Data.Store.Impl.Store Control.External.ExternalTask
instance Data.CAS.ContentHashable.ContentHashable GHC.Types.IO Control.External.Env
instance Data.Aeson.Types.FromJSON.FromJSON Control.External.Env
instance Data.Aeson.Types.ToJSON.ToJSON Control.External.Env
instance Data.Store.Impl.Store Control.External.Env
instance Data.CAS.ContentHashable.ContentHashable GHC.Types.IO Control.External.OutputCapture
instance Data.Aeson.Types.FromJSON.FromJSON Control.External.OutputCapture
instance Data.Aeson.Types.ToJSON.ToJSON Control.External.OutputCapture
instance Data.Store.Impl.Store Control.External.OutputCapture
instance Data.CAS.ContentHashable.ContentHashable GHC.Types.IO Control.External.ParamField
instance Data.Aeson.Types.FromJSON.FromJSON Control.External.ParamField
instance Data.Aeson.Types.ToJSON.ToJSON Control.External.ParamField
instance Data.Store.Impl.Store Control.External.ParamField
instance Data.String.IsString Control.External.Param
instance Data.CAS.ContentHashable.ContentHashable GHC.Types.IO Control.External.Param
instance Data.Aeson.Types.FromJSON.FromJSON Control.External.Param
instance Data.Aeson.Types.ToJSON.ToJSON Control.External.Param
instance Data.Store.Impl.Store Control.External.Param
instance Data.CAS.ContentHashable.ContentHashable GHC.Types.IO Control.External.InputPath
instance Data.Aeson.Types.FromJSON.FromJSON Control.External.InputPath
instance Data.Aeson.Types.ToJSON.ToJSON Control.External.InputPath
instance Data.Store.Impl.Store Control.External.InputPath


-- | A Funflow coordinator is used to distribute tasks amongst multiple
--   executors. It provides a functionality to submit tasks, to fetch them
--   for execution, and to check on their status.
--   
--   There are multiple possible instantiations of the <a>Coordinator</a>
--   class.
module Control.External.Coordinator

-- | Information about an executor capable of running tasks. Currently this
--   is just a newtype wrapper around hostname.
newtype Executor
Executor :: HostName -> Executor
data TaskStatus

-- | Task is in the queue and has not begun executing
Pending :: TaskStatus
Running :: ExecutionInfo -> TaskStatus
Completed :: ExecutionInfo -> TaskStatus

-- | Task has failed with failure count
Failed :: ExecutionInfo -> Int -> TaskStatus
data TaskInfo
KnownTask :: TaskStatus -> TaskInfo
UnknownTask :: TaskInfo
data ExecutionInfo
ExecutionInfo :: Executor -> TimeSpec -> ExecutionInfo
[_eiExecutor] :: ExecutionInfo -> Executor
[_eiElapsed] :: ExecutionInfo -> TimeSpec
data TaskError
ExternalTaskFailed :: TaskDescription -> TaskInfo -> Maybe (Path Abs File) -> Maybe (Path Abs File) -> TaskError
class Coordinator c where {
    type family Config c;
    type family Hook c = h | h -> c;
}

-- | Perform any necessary initialisation to connect to the coordinator.
initialise :: (Coordinator c, MonadIO m) => Config c -> m (Hook c)

-- | Submit a task to the task queue. It is allowed to overwrite a known
--   task.
submitTask :: (Coordinator c, MonadIO m) => Hook c -> TaskDescription -> m ()

-- | View the size of the current task queue
queueSize :: (Coordinator c, MonadIO m) => Hook c -> m Int

-- | Fetch information on the current task
taskInfo :: (Coordinator c, MonadIO m) => Hook c -> ContentHash -> m TaskInfo

-- | Pop a task off of the queue for execution. The popped task should be
--   added to the execution queue
popTask :: (Coordinator c, MonadIO m) => Hook c -> Executor -> m (Maybe TaskDescription)

-- | Await task completion.
--   
--   If the task is complete, this will return 'KnownTask Completed'. If
--   the task is failed, this will return 'KnownTask Failed'. If the task
--   is not known to the system, this will return <a>UnknownTask</a>.
--   Otherwise (if the task is pending or running), this will block until
--   the task either completes or fails.
awaitTask :: (Coordinator c, MonadIO m) => Hook c -> ContentHash -> m TaskInfo

-- | Update execution status for a running task. This should error for a
--   task which is not running.
updateTaskStatus :: (Coordinator c, MonadIO m) => Hook c -> ContentHash -> TaskStatus -> m ()

-- | Remove all pending tasks from the queue.
dropTasks :: (Coordinator c, MonadIO m) => Hook c -> m ()
eiExecutor :: Lens' ExecutionInfo Executor
eiElapsed :: Lens' ExecutionInfo TimeSpec
startTask :: (Coordinator c, MonadIO m) => Hook c -> m (Maybe TaskDescription)

-- | Check if a task is currently 'in progress' - e.g. pending or running.
isInProgress :: (Coordinator c, MonadIO m) => Hook c -> ContentHash -> m Bool

-- | Pop a task off of the queue for execution. Passes the popped task to
--   the given function for execution. If the function returns success
--   (<a>Right</a>), then the task will be marked as completed in the given
--   time. If the function returns failure (<a>Left</a>), then the task
--   will be marked as failed. If the function raises an exception or is
--   interrupted by an asynchronous exception, then the task will be placed
--   back on the task queue and the exception propagated. Returns
--   <a>Nothing</a> if no task is available and <tt><a>Just</a> ()</tt> on
--   task completion or regular failure.
withPopTask :: (Coordinator c, MonadIO m, MonadMask m, KatipContext m) => Hook c -> Executor -> (TaskDescription -> m (TimeSpec, Either Int ())) -> m (Maybe ())
instance Data.Store.Impl.Store Control.External.Coordinator.TaskInfo
instance Data.Store.Impl.Store Control.External.Coordinator.ExecutionInfo
instance Data.Store.Impl.Store Control.External.Coordinator.TaskStatus
instance GHC.Show.Show Control.External.Coordinator.TaskError
instance GHC.Show.Show Control.External.Coordinator.TaskInfo
instance GHC.Show.Show Control.External.Coordinator.TaskStatus
instance GHC.Show.Show Control.External.Coordinator.ExecutionInfo
instance Data.Store.Impl.Store Control.External.Coordinator.Executor
instance GHC.Show.Show Control.External.Coordinator.Executor
instance GHC.Exception.Type.Exception Control.External.Coordinator.TaskError


-- | In-memory co-ordinator for funflow. This module is not greatly useful
--   except for testing purposes.
module Control.External.Coordinator.Memory
data MemoryCoordinator
MemoryCoordinator :: MemoryCoordinator
data MemHook
MemHook :: TVar [TaskDescription] -> TVar (Map ContentHash TaskStatus) -> MemHook
[_mhTaskQueue] :: MemHook -> TVar [TaskDescription]
[_mhExecutionQueue] :: MemHook -> TVar (Map ContentHash TaskStatus)
mhTaskQueue :: Lens' MemHook (TVar [TaskDescription])
mhExecutionQueue :: Lens' MemHook (TVar (Map ContentHash TaskStatus))
createMemoryCoordinator :: IO MemHook
instance Control.External.Coordinator.Coordinator Control.External.Coordinator.Memory.MemoryCoordinator


-- | Redis-based co-ordinator for Funflow.
--   
--   There are two co-ordinators defined in this module. They differ in
--   whether they open a new connection to Redis or re-use an existing one.
--   Other than that they behave identically.
module Control.External.Coordinator.Redis
data Redis
Redis :: Redis
data RedisPreconnected
RedisPreconnected :: RedisPreconnected
instance Control.External.Coordinator.Coordinator Control.External.Coordinator.Redis.RedisPreconnected
instance Control.External.Coordinator.Coordinator Control.External.Coordinator.Redis.Redis


-- | SQLLite co-ordinator for Funflow.
--   
--   This co-ordinator effectively uses the shared filesystem as a tool for
--   task distribution and sequencing. This means that it can control a
--   distributed funflow task without needing any additional processes
--   running.
module Control.External.Coordinator.SQLite

-- | SQLite coordinator tag.
data SQLite
SQLite :: SQLite
instance GHC.Show.Show Control.External.Coordinator.SQLite.SQLiteCoordinatorError
instance Database.SQLite.Simple.FromField.FromField Control.External.Coordinator.SQLite.SqlExternal
instance GHC.Exception.Type.Exception Control.External.Coordinator.SQLite.SQLiteCoordinatorError
instance Control.External.Coordinator.Coordinator Control.External.Coordinator.SQLite.SQLite
instance Database.SQLite.Simple.FromRow.FromRow Control.External.Coordinator.SQLite.SqlTask
instance Database.SQLite.Simple.ToField.ToField Control.External.Coordinator.SQLite.SqlExternal
instance Database.SQLite.Simple.FromRow.FromRow Control.External.Coordinator.SQLite.SqlTaskInfo
instance GHC.Enum.Enum Control.External.Coordinator.SQLite.SqlTaskStatus
instance Database.SQLite.Simple.FromField.FromField Control.External.Coordinator.SQLite.SqlExecutor
instance Database.SQLite.Simple.ToField.ToField Control.External.Coordinator.SQLite.SqlExecutor
instance Database.SQLite.Simple.FromField.FromField Control.External.Coordinator.SQLite.SqlTaskStatus
instance Database.SQLite.Simple.ToField.ToField Control.External.Coordinator.SQLite.SqlTaskStatus


-- | Executor for external tasks.
--   
--   An executor will poll for tasks on the co-ordinator, mark them as in
--   progress and then execute them.
--   
--   You probably want to start with <a>executeLoop</a>.
module Control.External.Executor
data ExecutionResult

-- | The result already exists in the store and there is no need to
--   execute. This is also returned if the job is already running
--   elsewhere.
Cached :: ExecutionResult

-- | The computation is already running elsewhere. This is probably
--   indicative of a bug, because the coordinator should only allow one
--   instance of a task to be running at any time.
AlreadyRunning :: ExecutionResult

-- | Execution completed successfully after a certain amount of time.
Success :: TimeSpec -> ExecutionResult

-- | Execution failed with the following exit code. TODO where should logs
--   go?
Failure :: TimeSpec -> Int -> ExecutionResult

-- | The executor itself failed to execute the external task. E.g. because
--   the executable was not found.
ExecutorFailure :: IOException -> ExecutionResult

-- | Execute an individual task.
execute :: ContentStore -> TaskDescription -> KatipContextT IO ExecutionResult

-- | Execute tasks forever
executeLoop :: forall c. Coordinator c => c -> Config c -> ContentStore -> IO ()

-- | Same as <a>executeLoop</a>, but allows specifying a custom
--   <a>Scribe</a> for logging
executeLoopWithScribe :: forall c. Coordinator c => c -> Config c -> ContentStore -> Scribe -> IO ()

-- | <tt>withFollowFile in out</tt> follows the file <tt>in</tt> and prints
--   contents to <tt>out</tt> as they appear. The file must exist. Doesn't
--   handle file truncation.
withFollowFile :: Path Abs File -> Handle -> IO a -> IO a
