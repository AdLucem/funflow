-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Make composable workflows
--   
--   See README at <a>https://github.com/tweag/funflow2</a>
@package funflow
@version 2.0.0

module Funflow.Run.Orphans
instance Data.CAS.ContentHashable.ContentHashable GHC.Types.IO Docker.API.Client.Internal.Types.ContainerSpec
instance Data.CAS.ContentHashable.ContentHashable GHC.Types.IO Docker.API.Client.Internal.Types.DockerClientError


-- | Run commands using Docker
module Funflow.Tasks.Docker

-- | Configure what task to run in Docker
data DockerTaskConfig
DockerTaskConfig :: Text -> Text -> [Arg] -> DockerTaskConfig

-- | The name of the docker image
[image] :: DockerTaskConfig -> Text

-- | The command to run
[command] :: DockerTaskConfig -> Text

-- | The arguments to pass to the command run inside of the container
[args] :: DockerTaskConfig -> [Arg]
data DockerTask i o
[DockerTask] :: DockerTaskConfig -> DockerTask DockerTaskInput Item

-- | Input to a Docker task to finalize its configuration
data DockerTaskInput
DockerTaskInput :: [VolumeBinding] -> Map String Text -> DockerTaskInput

-- | Input items to mount on the container
[inputBindings] :: DockerTaskInput -> [VolumeBinding]

-- | A map representing how to fill the argument placeholders (placeholder
--   label -&gt; argument value)
[argsVals] :: DockerTaskInput -> Map String Text

-- | Represent how to bind a directory from cas-store (<tt>CS.Item</tt>) to
--   a container internal file system
data VolumeBinding
VolumeBinding :: Item -> Path Abs Dir -> VolumeBinding
[item] :: VolumeBinding -> Item
[mount] :: VolumeBinding -> Path Abs Dir

-- | Represent an argument to pass to the command run inside of a Docker
--   container
data Arg

-- | Raw text argument
Arg :: Text -> Arg

-- | A placeholder for an argument to be passed as runtime input to the
--   task (filled by <tt>argsVals</tt>)
Placeholder :: String -> Arg
instance Data.String.IsString Funflow.Tasks.Docker.Arg


-- | Run a pure function or an IO monadic continuation
module Funflow.Tasks.Simple
data SimpleTask i o
[PureTask] :: (i -> o) -> SimpleTask i o
[IOTask] :: (i -> IO o) -> SimpleTask i o


-- | Run a pure function or an IO monadic continuation
module Funflow.Tasks.Store
data StoreTask i o
[PutDir] :: StoreTask (Path Abs Dir) Item
[GetDir] :: StoreTask Item (Path Abs Dir)

module Funflow.Flow

-- | Flow is the main type of Funflow. It is a task that takes an input
--   value of type <tt>input</tt> and produces an output value of type
--   <tt>output</tt>. It can use any named task (strand) that is defined in
--   <tt>RequiredStrands</tt>.
type Flow input output = forall m. (MonadIO m) => AnyRopeWith RequiredStrands (RequiredCoreTasks m) input output

-- | The constraints on the set of "strands" These will be "interpreted"
--   into "core tasks" (which have contraints defined below).
type RequiredStrands = '[ '("simple", SimpleTask), '("store", StoreTask), '("docker", DockerTask)]

-- | The class constraints on the "core task". The "core task" is the task
--   used to run any kind of "binary task" ("strand")
type RequiredCoreTasks m = '[Arrow, ArrowChoice, HasKleisli m, ProvidesCaching]
toFlow :: IsFlow binEff => binEff i o -> Flow i o
pureFlow :: (i -> o) -> Flow i o
ioFlow :: (i -> IO o) -> Flow i o
dockerFlow :: DockerTaskConfig -> Flow DockerTaskInput Item
putDir :: Flow (Path Abs Dir) Item
getDir :: Flow Item (Path Abs Dir)
instance Funflow.Flow.IsFlow Funflow.Tasks.Simple.SimpleTask
instance Funflow.Flow.IsFlow Funflow.Tasks.Docker.DockerTask
instance Funflow.Flow.IsFlow Funflow.Tasks.Store.StoreTask

module System.Directory.Funflow

-- | Move all the directories and files from a source directory to a target
--   directory
moveDirectoryContent :: Path Abs Dir -> Path Abs Dir -> IO ()


-- | This module defines how to run your flows
module Funflow.Run

-- | Run a flow with the default configuration
runFlow :: Flow input output -> input -> IO output

-- | Run a flow
runFlowWithConfig :: RunFlowConfig -> Flow input output -> input -> IO output

-- | Flow execution configuration
data RunFlowConfig
RunFlowConfig :: Path Abs Dir -> RunFlowConfig
[storePath] :: RunFlowConfig -> Path Abs Dir


-- | Composable computational workflows. See
--   <a>https://github.com/tweag/funflow2</a>
--   
--   This module re-exports other modules for conveniency.
module Funflow
(>>>) :: forall k cat (a :: k) (b :: k) (c :: k). Category cat => cat a b -> cat b c -> cat a c

-- | Any rope whose core provides caching can run cached tasks. The task is
--   identified by an explicit identifier
caching :: forall (core :: Type -> Type -> Type) ident a b (r :: RopeRec) (mantle :: [Strand]). (Arrow core, ProvidesCaching core, ContentHashable IO ident, ContentHashable IO a, Store b) => ident -> Rope r mantle core a b -> Rope r mantle core a b
